generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "omitApi", "multiSchema"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "auth"]
}

// This model mirrors Supabase's auth.users table
model User {
  id        String   @id // Maps to Supabase user.id (UUID)
  email     String   @unique // Maps to Supabase user.email
  createdAt DateTime @default(now()) // Maps to Supabase user.created_at
  updatedAt DateTime @updatedAt

  // Additional user profile information
  profile Profile? // One-to-one relation with profile

  // E-commerce related relations
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  addresses     Address[]

  @@map("users")
  @@schema("auth")
}

// Separate profile model for additional user information
model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique // References Supabase user.id
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  phoneNumber String?
  role        Role    @default(CUSTOMER)
  avatarUrl   String?
  metadata    Json? // Additional profile data

  @@map("profiles")
  @@schema("auth")
}

enum Role {
  ADMIN
  CUSTOMER

  @@schema("auth")
}

model Product {
  id            String             @id @default(cuid())
  name          String
  description   String
  price         Decimal            @db.Decimal(10, 2)
  stock         Int                @default(0)
  images        String[]
  categoryId    String
  category      Category           @relation(fields: [categoryId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  attributes    ProductAttribute[]

  // Search and filter specific fields
  slug         String                   @unique // URL-friendly name
  isActive     Boolean                  @default(true)
  isPublished  Boolean                  @default(false)
  tags         String[] // Array of searchable tags
  brand        String? // Brand name for filtering
  weight       Float? // For shipping calculations
  dimensions   Json? // Store height, width, length
  searchVector Unsupported("tsvector")? // Full-text search vector
  avgRating    Float                    @default(0) // Calculated average rating
  totalReviews Int                      @default(0) // Count of reviews

  // Numeric fields for various filtering scenarios
  priceDiscount Int? @default(0) //Discount in percentage
  salesCount    Int  @default(0) // Number of times sold
  viewCount     Int  @default(0) // Number of times viewed

  // Additional metadata for filtering
  metadata Json? // Flexible storage for additional attributes

  @@index([name])
  @@index([price])
  @@index([createdAt])
  @@index([avgRating])
  @@index([salesCount])
  @@index([categoryId])
  @@index([isActive, isPublished])
  @@index([tags])
  // Full-text search index (Postgres specific)
  @@index([searchVector], type: Gin)
  @@map("products")
  @@schema("public")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToSubcategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Search and filter specific fields
  slug     String  @unique // URL-friendly name
  isActive Boolean @default(true)
  order    Int     @default(0) // For custom sorting
  icon     String? // Category icon
  imageUrl String? // Category image
  metadata Json? // Additional metadata

  // Fields for nested category handling
  level Int      @default(0) // Depth in category tree
  path  String[] // Full path from root to this category

  @@index([name])
  @@index([slug])
  @@index([parentId])
  @@index([path])
  @@index([isActive])
  @@map("categories")
  @@schema("public")
}

model ProductAttribute {
  id        String  @id @default(cuid())
  name      String
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id])

  // Added for better filtering
  isFilterable Boolean @default(false)
  isSearchable Boolean @default(false)
  displayOrder Int     @default(0)

  @@index([name, value])
  @@index([productId])
  @@map("product_attributes")
  @@schema("public")
}

model Order {
  id            String        @id @default(cuid())
  userId        String // References Supabase user.id
  user          User          @relation(fields: [userId], references: [id])
  status        OrderStatus   @default(PENDING)
  total         Decimal       @db.Decimal(10, 2)
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?

  @@map("orders")
  @@schema("auth")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED

  @@schema("auth")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED

  @@schema("auth")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  @@map("order_items")
  @@schema("auth")
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String // References Supabase user.id
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@map("cart_items")
  @@schema("auth")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@map("wishlist_items")
  @@schema("auth")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  phoneNumber String
  addressOne  String
  addressTwo  String?
  company     String?
  city        String
  state       String
  country     String
  postalCode  String
  isDefault   Boolean @default(false)
  orders      Order[]

  @@map("addresses")
  @@schema("auth")
}

model Review {
  id        String   @id @default(cuid())
  userId    String // References Supabase user.id
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
  @@schema("auth")
}
